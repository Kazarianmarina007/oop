#include "pch.h"
#include <iostream>
#include <string>
#include <cmath>
#include <vector>
#include <sstream>
#include <stdio.h>
#include <Windows.h>
using namespace std;

class cvet {
protected:
	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
	enum ConsoleColor {
		cherniy = 0,
		siniy = 1,
		zeleniy = 2,
		Cyan = 3,
		krasniy = 4,
		Magenta = 5,
		koricneviy = 6,
		LightGray = 7,
		DarkGray = 8,
		LightBlue = 9,
		LightGreen = 10,
		LightCyan = 11,
		LightRed = 12,
		LightMagenta = 13,
		Yellow = 14,
	};
public:
	cvet(int fon, int tekst) {
		ConsoleColor cv1, cv2;
		cv1 = ConsoleColor(fon);
		cv2 = ConsoleColor(tekst);
	}
};
class cvet_f_t : cvet {
public:
	cvet_f_t(int fon, int tekst) :cvet(fon, tekst) {

		SetConsoleTextAttribute(hConsole, (WORD)((fon << 4) | tekst));
	}
};

vector <float> chi;
vector <string> zna;
vector <int> id_zna;
vector <int> prior_skL;
vector <int> prior_skP;
vector <int> mesto_znaka1;

int kolsk = 0;// kol-vo par skobok
int kol_ch = 0;//kol-vo chisel vnutri 1 pari skobok
int kol_zna = 0;//kol-vo znakov vnutri 1 pari skobok
int dlina = 0;//dlina vvoda
int del_na_m = 0;//delenie na minus 

void ob();//vivod pravil vvoda
void cveta();
string sozd_sk(string vvod, int dl);//sozdanie stroki, soderjashchey skobki na sootv mestah, a na ostalnih mestah probely
void sk(string vvod, int kolsk, int dl1);//rasstavlenie prioritetov skobok
void umen(int pol, int kolzna);
float podschet(int kolzna, int kolch);//podschet virajenia 
void znaki(string vvod, int lev, int prav);//raspoznavanie znakov
float cifry(string vvod1);//raspoznovanie cifr
void chisla(string vvod, int lev, int prav);//raspoznovanie chisel
string ismenen(string vvod_poluch, float res_poluch, int lev, int prav);//vstavka resultata na mesto skobok
string dop_ismenen(string vvod_poluch);//proverka na +- ili -- ili /- ili *-
string dop_dop_ismenenie(string vvod_poluch,int lev,int prav);//proverka na sin[-] cos[-] tg[-] ln[-]
void ochistka();

int main()
{
	setlocale(LC_ALL, "Russian");
	cveta();
	int vveden_fon = 0, vveden_txt = 0;
	cin >> vveden_fon >> vveden_txt;
	cvet_f_t c1(vveden_fon,vveden_txt);
	system("cls");
	ob();//vivod menu
	l1://metka
	string vvod;
	cin >> vvod;
	vvod = '(' + vvod + ')';
	int dl = vvod.length();
	dlina = dl;

	string skobki = sozd_sk(vvod, dl);//massiv tolko so skobkami

	kolsk = kolsk / 2;//uznaem kol-vo par skobok
	int k = kolsk;
	sk(skobki, kolsk, dl);//rasstavliaem prioretety skobok

	float res = 0;
	string vvod_izm = vvod;//ismeniaemiy vvod;
	for (int i = 0; i < kolsk; i++) {
		chisla(vvod_izm, prior_skL[i], prior_skP[i]);
		vvod_izm = dop_dop_ismenenie(vvod_izm,prior_skL[i],prior_skP[i]);
		znaki(vvod_izm, prior_skL[i], prior_skP[i]);
		res = podschet(kol_zna, kol_ch);
		vvod_izm = ismenen(vvod_izm, res, prior_skL[i], prior_skP[i]);
		vvod_izm = dop_ismenen(vvod_izm);
		chi.clear();
		zna.clear();
		id_zna.clear();
		kol_ch = 0;
		kol_zna = 0;
	}
	cout << "результат: " << res << endl;
	ochistka();
	goto l1;
	system("pause");
	return 0;

}

string sozd_sk(string vvod, int dl) {
	string sk;
	for (int i = 0; i < dl; i++) {//sozdanie stroki, soderjashchey skobki na sootv mestah, a na ostalnih mestah probely
		if ((vvod[i] == ')') || (vvod[i] == '(')) { sk = sk + vvod[i]; kolsk++; }//dlia sohranenia indeksov, na kotorih stoiat skobki
		else { sk = sk + ' '; };//dlia rasstavleniia v dalneishem prioritetov skobok
	}
	return sk;
}

void sk(string skobki, int kolsk, int dl1) {
	int posl_vsrech_sk = 1;//poslednaia vstrechnaia skobka
	int id_pls = 0;//id poslednei levoi skobki
	while (kolsk != 0) {//poka ne zakonchatsia pari skobok
		for (int i = 0; i < dl1; i++) {//zanovo obrabatyvaem vvedennuu stroku
			if (skobki[i] == '(') { posl_vsrech_sk = 1; id_pls = i; };
			if ((skobki[i] == ')') && (posl_vsrech_sk == 1)) {
				prior_skL.push_back(id_pls);//sozdaem vektori prioritetov skobok
				prior_skP.push_back(i);
				skobki.erase(i, 1);
				skobki.insert(i, 1, ' ');
				skobki.erase(id_pls, 1);
				skobki.insert(id_pls, 1, ' ');
				kolsk--;
				break;
			}
			if (skobki[i] == ')') { posl_vsrech_sk = 0; };
		}
		dl1 = skobki.length();
	}
}

void umen(int pol, int kolzna) {
	for (int i = 0; i < kolzna; i++) {
		if (id_zna[i] > pol) {
			id_zna[i] = id_zna[i] - 1;
		}
		else if (kolzna == 1) {
			id_zna[0] = 0;
		}
	}
}

float podschet(int kolzna, int kolch) {
	while (kolzna > 0) {
		float res;
		switch (zna[0][0]) {
		case'*': {
			res = chi[id_zna[0]] * chi[id_zna[0] + 1];
			if ((del_na_m == 1) && (!mesto_znaka1.empty())) {
				if (mesto_znaka1[0] == id_zna[0]) {
					res = res * (-1);
					mesto_znaka1.erase(mesto_znaka1.begin() + 0);
				}
			}
			chi[id_zna[0]] = res;
			chi.erase(chi.begin() + id_zna[0] + 1);
			zna.erase(zna.begin() + 0);
			int pol = id_zna[0];
			id_zna.erase(id_zna.begin() + 0);
			kolzna--;
			kolch--;
			if (!id_zna.empty()) {
				umen(pol, kolzna);
			}
			break; }

		case'/': {
			res = chi[id_zna[0]] / chi[id_zna[0] + 1];
			if ((del_na_m == 1) && (!mesto_znaka1.empty())) {
				if (mesto_znaka1[0] == id_zna[0]) {
					res = res * (-1);
					mesto_znaka1.erase(mesto_znaka1.begin() + 0);
				}
			}
			res = round(res * 100) / 100;
			chi[id_zna[0]] = res;
			chi.erase(chi.begin() + id_zna[0] + 1);
			zna.erase(zna.begin() + 0);
			int pol = id_zna[0];
			id_zna.erase(id_zna.begin() + 0);
			kolzna--;
			kolch--;
			if (!id_zna.empty()) {
				umen(pol, kolzna);
			}
			break;
		}
		case'+': {
			res = chi[id_zna[0]] + chi[id_zna[0] + 1];
			chi[id_zna[0]] = res;
			chi.erase(chi.begin() + id_zna[0] + 1);
			zna.erase(zna.begin() + 0);
			int pol = id_zna[0];
			id_zna.erase(id_zna.begin() + 0);
			kolzna--;
			kolch--;
			if (!id_zna.empty()) {
				umen(pol, kolzna);
			}
			break;
		}
		case '-': {
			res = chi[id_zna[0]] - chi[id_zna[0] + 1];
			chi[id_zna[0]] = res;
			chi.erase(chi.begin() + id_zna[0] + 1);
			zna.erase(zna.begin() + 0);
			int pol = id_zna[0];
			id_zna.erase(id_zna.begin() + 0);
			kolzna--;
			kolch--;
			if (!id_zna.empty()) {
				umen(pol, kolzna);
			}
			break;
		}
		}
	}
	float res1 = chi[0];
	return res1;
}

void znaki(string vvod, int lev, int prav) {
	string z;
	int id = 0;
	int uchet = 0;
	if (vvod[lev + 1] == '-') {
		uchet = 2;
	}
	for (int i = lev + uchet; i < prav; i++) {
		if (vvod[i] == '*') {
			for (int j = lev + uchet; j < i; j++) {
				if ((vvod[j] == '*') || (vvod[j] == '/') || (vvod[j] == '+') || (vvod[j] == '-')) {
					id++;
				}
			}
			z = vvod[i];
			zna.push_back(z);
			id_zna.push_back(id);
			id = 0;
			kol_zna++;
		}
		else if (vvod[i] == '/') {
			for (int j = lev + uchet; j < i; j++) {
				if ((vvod[j] == '*') || (vvod[j] == '/') || (vvod[j] == '+') || (vvod[j] == '-')) {
					id++;
				}
			}
			z = vvod[i];
			zna.push_back(z);
			id_zna.push_back(id);
			id = 0;
			kol_zna++;
		}
	}
	for (int i = lev + uchet; i < prav; i++) {
		if (vvod[i] == '+') {
			for (int j = lev + uchet; j < i; j++) {
				if ((vvod[j] == '*') || (vvod[j] == '/') || (vvod[j] == '+') || (vvod[j] == '-')) {
					id++;
				}
			}
			z = vvod[i];
			zna.push_back(z);
			id_zna.push_back(id);
			id = 0;
			kol_zna++;
		}
		else if (vvod[i] == '-') {
			for (int j = lev + uchet; j < i; j++) {
				if ((vvod[j] == '*') || (vvod[j] == '/') || (vvod[j] == '+') || (vvod[j] == '-')) {
					id++;
				}
			}
			z = vvod[i];
			zna.push_back(z);
			id_zna.push_back(id);
			id = 0;
			kol_zna++;
		}
	}
}

float cifry(string vvod1) {
	string ch1 = "";
	float ch2 = 0;
	int o = 0;
	int uchet = 0;
	int minus = 0;
	if (vvod1[0] == '-') {
		uchet = 1;
		minus = 1;
	}
	o = o + uchet;
	while ((vvod1[o] > 47) && (vvod1[o] < 58)) {
		ch1 = ch1 + vvod1[o];
		o++;
	}
	ch2 = atoi(ch1.c_str());
	ch1 = "";
	if (vvod1[o] == '.') {
		o++;
		int sdv = 0;//sdvig
		while ((vvod1[o] > 47) && (vvod1[o] < 58)) {
			ch1 = ch1 + vvod1[o];
			sdv++;
			o++;
		}
		float ch4 = atoi(ch1.c_str());
		for (int ii = 0; ii < sdv; ii++) {
			ch4 = ch4 / 10;
		}
		ch2 = ch2 + ch4;
		ch4 = 0;
	}
	float res = ch2;
	if (minus == 1) {
		res = res * (-1);
	}
	ch1 = "";
	ch2 = 0;
	return res;
}

void chisla(string vvod, int lev, int prav) {
	float ch2 = 0, ch3 = 0;
	string celikom;
	int pereskok = 0;
	int perv_znak = 0;//perviy znak
	if (vvod[lev + 1] == '-') {
		perv_znak = 1;
	}
	for (int i = lev; i < prav; i++) {
		switch (vvod[i]) {
		case 's': {
			if (vvod[i + 1] == 'i') {
				for (int j = i; j < prav; j++) {
					if (vvod[j] == '[') {
						int l = j + 1;
						string vvod1;
						while (vvod[l] != ']') {
							vvod1 = vvod1 + vvod[l];
							l++;
						}
						celikom = "sin[" + vvod1 + ']';
						pereskok = celikom.length();
						ch2 = cifry(vvod1);
						ch3 = sin(ch2);
						if ((i == lev + 2) && (perv_znak == 1)) {
							ch3 = ch3 * (-1);
						}
						//if ((scl_m == 1) && (!mesto_scl_m.empty())) {
						//	if (mesto_scl_m[0] == id_zna[0]) {/////////////////////////////////////////////////////////////////////
						//		ch3 = ch3 * (-1);
						//		mesto_scl_m.erase(mesto_scl_m.begin() + 0);
						//	}
						//}
						chi.push_back(ch3);
						kol_ch++;
						ch2 = 0;
						ch3 = 0;
						break;
					}
				}
				i = i + pereskok;
				break;
			}
			break; }
		case 't': {
			for (int j = i; j < prav; j++) {
				if (vvod[j] == '[') {
					int l = j + 1;
					string vvod1;
					while (vvod[l] != ']') {
						vvod1 = vvod1 + vvod[l];
						l++;
					}
					celikom = "tg[" + vvod1 + ']';
					pereskok = celikom.length();
					ch2 = cifry(vvod1);
					ch3 = tan(ch2);
					if ((i == lev + 2) && (perv_znak == 1)) {
						ch3 = ch3 * (-1);
					}
					/*if ((scl_m == 1) && (!mesto_scl_m.empty())) {
						if (mesto_scl_m[0] == id_zna[0]) {
							ch3 = ch3 * (-1);
							mesto_scl_m.erase(mesto_scl_m.begin() + 0);
						}
					}*/
					chi.push_back(ch3);
					kol_ch++;
					ch2 = 0;
					ch3 = 0;
					break;
				}
			}
			i = i + pereskok;
			break; }
		case 'c': {
			for (int j = i; j < prav; j++) {
				if (vvod[j] == '[') {
					int l = j + 1;
					string vvod1;
					while (vvod[l] != ']') {
						vvod1 = vvod1 + vvod[l];
						l++;
					}
					celikom = "cos[" + vvod1 + ']';
					pereskok = celikom.length();
					ch2 = cifry(vvod1);
					ch3 = cos(ch2);
					if ((i == lev + 2) && (perv_znak == 1)) {
						ch3 = ch3 * (-1);
					}
					
					chi.push_back(ch3);
					kol_ch++;
					ch2 = 0;
					ch3 = 0;
					break;
				}
			}
			i = i + pereskok;
			break; }
		case 'l': {
			for (int j = i; j < prav; j++) {
				if (vvod[j] == '[') {
					int l = j + 1;
					string vvod1;
					while (vvod[l] != ']') {
						vvod1 = vvod1 + vvod[l];
						l++;
					}
					celikom = "ln[" + vvod1 + ']';
					pereskok = celikom.length();
					ch2 = cifry(vvod1);
					ch3 = log(ch2);
					if ((i == lev + 2) && (perv_znak == 1)) {
						ch3 = ch3 * (-1);
					}
					/*if ((scl_m == 1) && (!mesto_scl_m.empty())) {
						if (mesto_scl_m[0] == id_zna[0]) {
							ch3 = ch3 * (-1);
							mesto_scl_m.erase(mesto_scl_m.begin() + 0);
						}
					}*/
					chi.push_back(ch3);
					kol_ch++;
					ch2 = 0;
					ch3 = 0;
					break;
				}
			}
			i = i + pereskok;
			break; }
		case 'e': {
			ch3 = exp(1);
			if ((i == lev + 2) && (perv_znak == 1)) {
				ch3 = ch3 * (-1);
			}
			chi.push_back(ch3);
			kol_ch++;
			break; }
		}

		if ((vvod[i] > 47) && (vvod[i] < 58)) {
			string vvod1;
			int o = i;
			while (((vvod[o] > 47) && (vvod[o] < 58)) || (vvod[o] == '.')) {
				vvod1 = vvod1 + vvod[o];
				o++;
			}
			ch2 = cifry(vvod1);
			if ((i == lev + 2) && (perv_znak == 1)) {
				ch2 = ch2 * (-1);
			}
			chi.push_back(ch2);
			kol_ch++;
			ch2 = 0;
			ch3 = 0;
			celikom = vvod1;
			pereskok = celikom.length();
			i = i + pereskok;
		}
	}
}

string ismenen(string vvod_poluch, float res_poluch, int lev, int prav) { //vstavka resutata na mesto skobok
	string res_str;
	stringstream ss;
	ss << res_poluch;
	res_str = ss.str();
	int dlina_resultata = res_str.length();
	int dlina_vvoda = prav - lev + 1;
	int raznica = dlina_vvoda - dlina_resultata;
	for (int i = lev; i < prav + 1; i++) {
		vvod_poluch[i] = ' ';
	}
	int o = 0;

	for (int i = lev; i < prav + 1 - raznica; i++) {
		vvod_poluch[i] = res_str[o];
		o++;
	}
	return vvod_poluch;
}

string dop_ismenen(string vvod_poluch) {//proverka na nalichie +- ili -- ili /- ili *-
	for (int i = 0; i < dlina - 1; i++) {
		if ((vvod_poluch[i] == '+') && (vvod_poluch[i + 1] == '-')) {
			vvod_poluch[i] = ' ';
			vvod_poluch[i + 1] = '-';
		}
		if ((vvod_poluch[i] == '-') && (vvod_poluch[i + 1] == '-')) {
			vvod_poluch[i] = ' ';
			vvod_poluch[i + 1] = '+';
		}
		if ((vvod_poluch[i] == '/') && (vvod_poluch[i + 1] == '-')) {

			int id = 0;
			int id_pm = 0;
			for (int j = 0; j < i; j++) {
				if (vvod_poluch[j] == '(') {
					id = 0;
					id_pm = 0;
				}
				if ((vvod_poluch[j] == '*') || (vvod_poluch[j] == '/') || (vvod_poluch[j] == '+') || (vvod_poluch[j] == '-')) {

					id++;
					if ((vvod_poluch[j] == '*') || (vvod_poluch[j] == '/')) {
						id_pm++;
					}
				}
			}
			id = id - id_pm;
			mesto_znaka1.push_back(id);
			vvod_poluch[i + 1] = ' ';
			del_na_m = 1;
		}
		if ((vvod_poluch[i] == '*') && (vvod_poluch[i + 1] == '-')) {
			int id = 0;
			int id_pm = 0;
			for (int j = 0; j < i; j++) {
				if (vvod_poluch[j] == '(') {
					id = 0;
					id_pm = 0;
				}
				if ((vvod_poluch[j] == '*') || (vvod_poluch[j] == '/') || (vvod_poluch[j] == '+') || (vvod_poluch[j] == '-')) {
					id++;
					if ((vvod_poluch[j] == '*') || (vvod_poluch[j] == '/')) {
						id_pm++;
					}
				}
			}
			id = id - id_pm;
			mesto_znaka1.push_back(id);
			vvod_poluch[i + 1] = ' ';
			del_na_m = 1;
		}
	}

	return vvod_poluch;
}

string dop_dop_ismenenie(string vvod_poluch,int lev, int prav) {
	for (int i = lev; i < prav-1; i++) {
		if ((vvod_poluch[i] == '[') && (vvod_poluch[i + 1] == '-')) {
			vvod_poluch[i+1] = ' ';
		}
	}
	return vvod_poluch;
}

void ochistka() {
	kolsk = 0;// kol-vo par skobok
	kol_ch = 0;//kol-vo chisel vnutri 1 pari skobok
	kol_zna = 0;//kol-vo znakov vnutri 1 pari skobok
	dlina = 0;//dlina vvoda
	del_na_m = 0;//delenie na minus 
	chi.clear();
	zna.clear();
	id_zna.clear();
	prior_skL.clear();
	prior_skP.clear();
	mesto_znaka1.clear();

}

void ob() {
	cout << " Условные обозначения: " << endl << endl;
	cout << "1. числа с плавающей точкой вводятся через ТОЧКУ(не запятую)" << endl << endl;
	cout << "2. sin[],cos[],tg[],ln[] вводятся аналогично" << endl << endl;
	cout << "3. экспонента вводится как e" << endl;
	cout << "4. вложенные функции вводятся в еще одних круглых скобках" << endl;
	cout << "	например, sin[(cos[2])]" << endl;
	cout << endl << endl << endl;
	cout << " введите пример и нажмите ENTER" << endl;
}

void cveta() {
	cout << " 0 — черный   1 — синий    2 — зеленый" << endl;
	cout << " 3 — голубой  4 — красный  5 — лиловый" << endl;
	cout << " 6 — желтый   7 — белый    8 — серый" << endl;
	cout << " 9 — свело - синий      10 — светло - зеленый" << endl;
	cout << " 11 — светло - голубой  12 — светло - красный" << endl;
	cout << " 13 — светло - лиловый  14 — светло - желтый" << endl;
	cout << endl << endl;
	cout << "выберите цвет фона и цвет текста" << endl;
	cout << "введите номера выбраных цветов через пробел ";
}
